// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Customer {
  id          String @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  address     String?
  isProspect  Boolean @default(true) // true = Prospect, false = Customer
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  offers      Offer[]
  invoices    Invoice[]
  appointments Appointment[]

  @@map("customers")
}

model Offer {
  id            String @id @default(cuid())
  offerNumber   String @unique
  customerId    String
  jobDescription String?
  measurements   String? // JSON string for now
  materialsCost  Float @default(0)
  laborCost     Float @default(0)
  totalCost     Float @default(0)
  status        OfferStatus @default(DRAFT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoice       Invoice?

  @@map("offers")
}

model Invoice {
  id            String @id @default(cuid())
  invoiceNumber String @unique
  customerId    String
  offerId       String @unique
  totalAmount   Float
  status        InvoiceStatus @default(DRAFT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  offer         Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Appointment {
  id          String @id @default(cuid())
  customerId  String
  date        DateTime
  notes       String?
  photos      String? // JSON array of photo URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

enum OfferStatus {
  DRAFT
  SENT
  ACCEPTED
  DECLINED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}